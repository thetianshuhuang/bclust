ls
ls
dir
Sys.time()
start = Sys.time()
Sys.time() - start
10 + Sys.time() - start
source('~/projects/bmcc/tests/test.R', echo=TRUE)
source('~/projects/bmcc/tests/test.R', echo=TRUE)
source('~/projects/bmcc/tests/test.R', echo=TRUE)
library(reticulate)
bmcc <- import("bmcc")
bmcc$is_np_array(rep(1, 10))
bmcc$is_np_array(np_array(rep(1, 10)))
bmcc <- import("bmcc", convert=FALSE)
bmcc$is_np_array(np_array(rep(1, 10)))
bmcc$is_np_array(np_array(rep(1, 10))) == TRUE
TRUE && FALSE
TRUE and FALSE
warning("test")
source(main.R)
source("./R/main.R")
getwd()
setwd("projects/bmcc/")
setwd("r/bmcc/R")
source("main.R")
source("main.R")
uint16_sanitize(rep(1, 100))
bmcc$is_np_array(rep(1, 100))
bmcc$is_np_array(rep(1, 100)) && bmcc$is_contiguous(rep(1, 100))
source("main.R")
uint16_sanitize(rep(1, 100))
source("main.R")
uint16_sanitize(rep(1, 100))
as.integer(1)
1
typeof(1)
typeof(1) == "double"
typeof(1L)
typeof(1) == "integer"
as.integer(1.5)
as.integer(1.5) == 1.5
as.integer(1) == 1
is.atomic("asdf")
is.scalar("asdf")
is.atomic(1)
length(1)
"asdf" + "asdf"
paste("asdf", "asdf")
paste("asdf", "asdf", sep="")
x = NULL
x == NULL
(x == NULL)
np_array("asdf", dtype=np.uint16)
np_array("asdf", dtype="np.uint16")
np_array("asdf", dtype="uint16")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
uint16_sanitize("asdf")
uint16_sanitize(rep(1, 100))
float64_sanitize(rep(1, 100))
source("main.R")
source("main.R")
dataset <- GaussianMixture(n=1000L, k=3L, d=2L, r=0.8, alpha=10, df=2)
model <- GibbsMixtureModel(dataset$data, NormalWishart(df=2L), mixture_model=DPM(alpha=1, use_eb=TRUE), assignments=rep(0, 1000), thinning=1L)
source("main.R")
dataset <- GaussianMixture(n=1000L, k=3L, d=2L, r=0.8, alpha=10, df=2)
model <- GibbsMixtureModel(dataset$data, NormalWishart(df=2L), mixture_model=DPM(alpha=1, use_eb=TRUE), assignments=rep(0, 1000), thinning=1L)
for(i in 1:1000) { model$iter() }
res <- model$select_lstsq(burn_in=100L)
res$evaluate(dataset$assignments, oracle=dataset$oracle, oracle_matrix=dataset$oracle_matrix)
res$trace()
res$trace(plot=TRUE)
res$matrices(plot=TRUE)
res$clustering()
res$clustering(plot=TRUE)
